project(":tioga-push-server-grizzly") {

    apply plugin: 'distribution'

    apply plugin: 'application'
    mainClassName = "org.tiogasolutions.push.server.grizzly.PushServer"

    version = tiogaAppVersion

    dependencies {
        compile(project(":tioga-push-engine"))

        compile("org.tiogasolutions.lib:tioga-lib-spring:+")

        compile("org.glassfish.jersey.ext:jersey-spring3:2.22.2")

        compile("org.tiogasolutions.runners:tioga-runners-grizzly:+")

        // required by Jersey-Spring's stupid attempt to check for a ServletContext
        compile("javax.servlet:javax.servlet-api:3.1.0")

        testCompile("org.testng:testng:6.8.21")
    }

    task aws << {
        File buildfile = file("$buildDir/aws/Buildfile")
        buildfile.parentFile.mkdirs()
        FileWriter writer = new FileWriter(buildfile)
        writer.write("build: unzip -qo ${project.name}-${project.version}.zip\n")
        writer.close()

        File procfile = file("$buildDir/aws/Procfile")
        procfile.parentFile.mkdirs()
        writer = new FileWriter(procfile)
        writer.write("web: ${project.name}-${project.version}/bin/${project.name}\n")
        writer.close()
    }

    distributions {
        main {
            contents {
                into("lib") {
                    from(jar)
                    from(project.configurations.runtime)
                }
            }
        }
    }

    jar {
        manifest {
            attributes(
                    "Module-Name": project.name,
                    "Implementation-Version": project.version,
                    "Build-Number": "${System.getenv('CODEBUILD_SOURCE_VERSION')}",
                    "Build-Timestamp": new Date().format("yyyy-MM.dd HH:mm:ss"),
                    "Main-Class": "${mainClassName}",
                    "Class-Path": configurations.compile.collect { "./libs/" + it.getName() }.join(" ")
            )
        }
    }

    apply(from: urlCache.get("https://raw.githubusercontent.com/tioga/build-scripts/master/build-config-deployer.gradle"))
}
